/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(1);
	__webpack_require__(4);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	//require('./../../project/hero/hero.js');


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	var hamburgerMenu = __webpack_require__(3);
	hamburgerMenu('.hamburger-menu', '.menu');


/***/ },
/* 3 */
/***/ function(module, exports) {

	// Hamburger Menu JS
	//
	// On clicking the hamburger icon and/or text the items of a menu are displayed
	var hamburgerMenu = function(triggerID, menuID) {
	  var iconID = triggerID.concat('__icon');
	  var textID = triggerID.concat('__text');

	  var trigger = document.querySelector(triggerID);
	  var icon = document.querySelector(iconID);
	  var text = document.querySelector(textID);
	  var menu = document.querySelector(menuID);

	  trigger.addEventListener('click', clickTrigger, false);

	  function clickTrigger(event) {
	    toggleClass(icon, iconID);
	    toggleClass(text, textID);
	    toggleClass(menu, menuID);
	  }

	  function toggleClass(element, klassName) {
	    var opened = klassName.concat('--opened').substr(1);
	    var closed = klassName.concat('--closed').substr(1);

	    var open = element.classList.contains(opened);

	    if (open) {
	      element.classList.remove(opened);
	      element.classList.add(closed);
	    } else {
	      element.classList.remove(closed);
	      element.classList.add(opened);
	    }
	  }
	}

	module.exports = hamburgerMenu;


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	__webpack_require__(5);


/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	var filter = __webpack_require__(6);
	filter('category', '.features__filters .li', '.features__articles .article');


/***/ },
/* 6 */
/***/ function(module, exports) {

	var visibleItems = [];

	// Click on a filter with a certain type
	// - type: the css class prefix, like 'year'
	// - filtersID : all filters of the same type, like 'year-filters' etc
	// - itemsID: the items to be filtered, like 'thumbs'
	var filter = function(type, filtersID, itemsID) {
	  var filters = document.querySelectorAll(filtersID);
	  var items = document.querySelectorAll(itemsID);

	  for (var i = 0; i < filters.length; i++) {
	    filters[i].addEventListener('click', clickFilter, false);
	  }


	  // Click on a filter
	  function clickFilter(event) {
	    // get current filter information
	    attr = this.dataset.filter;

	    // mark all filters inactive
	    markAllInactive(filters, 'filter--active');
	    visibleItems = removeAllElements(visibleItems, type);

	    // mark this filter active
	    this.classList.add('filter--active');
	    visibleItems.push(attr);

	    // do the filtering
	    doFilter();
	  }


	  // Show / hide items
	  function doFilter() {
	    for (var i = 0; i < items.length; i++) {
	      // show all
	      items[i].classList.remove('article--inactive');

	      // combine filters
	      // - only those items will be displayed who satisfy all filter criterias
	      var visible = true;

	      for (var j = 0; j < visibleItems.length; j++) {
	        visible = visible && items[i].classList.contains(visibleItems[j]);
	      }

	      if (!visible) {
	        items[i].classList.add('article--inactive');
	      }
	    }
	  }


	  // Remove certain elements from an array
	  function removeAllElements(array, type) {
	    return array.filter(function(item) {
	      return (item.indexOf(type) === -1);
	    });
	  }

	  // Remove the active class from a series of DOM elements
	  function markAllInactive(items, klass) {
	    for (var i = 0; i < items.length; i++) {
	      items[i].classList.remove(klass);
	    }
	  }


	}

	module.exports = filter;


/***/ }
/******/ ]);