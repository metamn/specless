/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(1);
	__webpack_require__(14);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	__webpack_require__(4);
	__webpack_require__(12);


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	var hamburgerMenu = __webpack_require__(3);
	hamburgerMenu('.hamburger-menu', '.menu');


/***/ },
/* 3 */
/***/ function(module, exports) {

	// Hamburger Menu JS
	//
	// On clicking the hamburger icon and/or text the items of a menu are displayed
	var hamburgerMenu = function(triggerID, menuID) {
	  var iconID = triggerID.concat('__icon');
	  var textID = triggerID.concat('__text');

	  var trigger = document.querySelector(triggerID);
	  var icon = document.querySelector(iconID);
	  var text = document.querySelector(textID);
	  var menu = document.querySelector(menuID);

	  trigger.addEventListener('click', clickTrigger, false);

	  function clickTrigger(event) {
	    toggleClass(icon, iconID);
	    toggleClass(text, textID);
	    toggleClass(menu, menuID);
	  }

	  function toggleClass(element, klassName) {
	    var opened = klassName.concat('--opened').substr(1);
	    var closed = klassName.concat('--closed').substr(1);

	    var open = element.classList.contains(opened);

	    if (open) {
	      element.classList.remove(opened);
	      element.classList.add(closed);
	    } else {
	      element.classList.remove(closed);
	      element.classList.add(opened);
	    }
	  }
	}

	module.exports = hamburgerMenu;


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	var slider2 = __webpack_require__(5);
	slider2('.publishers__slider .slider2', 2);


/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	var l = __webpack_require__(6);
	var select = __webpack_require__(7);
	var transform = __webpack_require__(8);
	var click = __webpack_require__(9);
	var klass = __webpack_require__(10);
	var getElementTransform = __webpack_require__(11);


	// A continuous slider
	//
	// $sliderID - the id of the slider container
	// $step - how many items slide at once


	// Set up the slider
	function Slider2(sliderID, step, callback) {
	  this.step = step;
	  this.callback = callback;

	  this.slides = select(sliderID + '__slides .slide');
	  this.buttons = select(sliderID + '__navigation .button');

	  this.slideWidth = getElementTransform(this.slides[1]);

	  klass(this.slides[2], 'slide--active', 'add');
	}


	// The main function
	var slider2 = function(sliderID, step, callback) {
	  s = new Slider2(sliderID, step, callback);

	  // Slide on click on a button
	  click(s.buttons, s.clickButton.bind(s));

	  // Slide on swipe
	  s.swipe();

	  // Callback on click on a slide
	  click(s.slides, s.clickSlide.bind(s));
	}



	// Slide click
	Slider2.prototype.clickSlide = function(event) {
	  var _this = this;

	  var slide = event; // event.target
	  _this.callback(slide);
	}


	// Button click
	Slider2.prototype.clickButton = function(event) {
	  var button = event; // event.target
	  var direction = (klass(button, 'button--left', 'has')) ? 1 : -1;

	  this.slide(direction);
	}

	// Swipe with Hammer.js
	Slider2.prototype.swipe = function() {
	  _this = this;

	  _this.slides.loop(function(slide) {
	    var hammer = new Hammer(slide);
	    hammer.get('swipe').set({
	      direction: Hammer.DIRECTION_HORIZONTAL,
	      threshold: 1,
	      velocity: 0.1
	    });

	    hammer.on("swipeleft", function() {
	      _this.slide(-1);
	    });

	    hammer.on("swiperight", function() {
	      _this.slide(1);
	    });
	  });
	}


	// Slide slides
	Slider2.prototype.slide = function(direction) {
	  _this = this;

	  _this.slides.loop(function(slide) {
	    var currentTransform = getElementTransform(slide);
	    var newTransform = parseFloat(currentTransform) + (direction * _this.slideWidth * _this.step);
	    var t = 'translateX(' + newTransform +'px)';
	    transform(slide, t, t);
	  });
	}




	module.exports = slider2;


/***/ },
/* 6 */
/***/ function(module, exports) {

	// Loop
	//
	// This is a replacement for the `for()` loop
	// - https://css-tricks.com/snippets/javascript/loop-queryselectorall-matches/
	//
	// It is important to avoid getting array elements by index, like `figures[i]`
	// - with `loop` if the `figures` are empty we won't get any error messages;
	// - with a `for` loop we will get an error and everything will halt
	//
	// Usage: `items.loop(item, index)`
	NodeList.prototype.loop = Array.prototype.forEach;
	Array.prototype.loop = Array.prototype.forEach;


	var loopDummy = function() {}
	module.exports = loopDummy;


/***/ },
/* 7 */
/***/ function(module, exports) {

	// Select
	//
	// A shorthand version for `document.querySelectorAll`
	// - this construct doesn't support a second argument specifying another container than `document`
	// - instead of `element.querySelectorAll('.id')` we should always use `document.querySelectorAll('.element .id')`
	//
	var select = function(IDs) {
	  return document.querySelectorAll(IDs);
	}


	module.exports = select;


/***/ },
/* 8 */
/***/ function(module, exports) {

	// Transform
	//
	// A cross broswer compatible CSS transform
	// - because it's easier than use the whole Modernizr library only for this single feature
	// - idea from https://github.com/thebird/Swipe/blob/master/swipe.js
	//


	var transform = function(element, valueWebkit, value) {
	  element.style.webkitTransform = valueWebkit;
	  element.style.MozTransform =
	  element.style.msTransform =
	  element.style.OTransform =
	  element.style.transform = value;
	}

	module.exports = transform;


/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	// Click
	//
	// Shorthand for `addEventListener("click")`
	//
	// - $items - a set of elements to apply click
	// - $cb - a callback function which returns the element clicked
	//
	// Usage:
	// click(items, function(item) { .... });
	//
	// Styleguide click


	var select = __webpack_require__(7);
	var l = __webpack_require__(6);


	var click = function(items, cb) {
	  items.loop(function(item) {
	    item.addEventListener("click", fn, false);
	  });

	  // The only way to return the HTMLElement clicked
	  // - all other constructs will return the mouse event instead
	  function fn() {
	    cb(this);
	  }
	}


	module.exports = click;


/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	var l = __webpack_require__(6);

	// The main Klass object
	//
	// $klass - one or more klasses like 'active' or 'active inactive'
	function Klass(klass) {
	  // converts multiple classes into an array
	  // - 'active inactive' => 'active', 'inactive'
	  this.klass = klass.split(' ');
	}

	Klass.prototype.removeAll = function(elements, klass, k) {
	  elements.loop(function(element) {
	    k.remove(element, klass);
	  });
	}

	Klass.prototype.addAll = function(elements, klass, k) {
	  elements.loop(function(element) {
	    k.add(element, klass);
	  });
	}

	Klass.prototype.remove = function(element, klass) {
	  element.classList.remove(klass);
	}

	Klass.prototype.add = function(element, klass) {
	  element.classList.add(klass);
	}

	Klass.prototype.has = function(element, klass) {
	  return element.classList.contains(klass);
	}

	//
	// $element - can be a single element or a collection of elements
	// $klass - can be a single klass or multiple klasses separated by space
	//
	var klass = function(element, klass, action) {
	  var k = new Klass(klass);

	  switch (action) {
	    case 'add':
	      k.klass.loop(function(klassname) {
	        k.add(element, klassname, k);
	      });
	      break;
	    case 'remove':
	      k.klass.loop(function(klassname) {
	        k.remove(element, klassname, k);
	      });
	      break;
	    case 'toggle':
	      k.klass.loop(function(klassname) {
	        k.has(element, klassname) ? k.remove(element, klassname, k) : k.add(element, klassname, k);
	      });
	      break;
	    case 'removeAll':
	      k.klass.loop(function(klassname) {
	        k.removeAll(element, klassname, k);
	      });
	      break;
	    case 'addAll':
	      k.klass.loop(function(klassname) {
	        k.addAll(element, klassname, k);
	      });
	      break;
	    case 'has':
	      return k.has(element, klass);
	      break;
	    default:
	  }
	}

	module.exports = klass;


/***/ },
/* 11 */
/***/ function(module, exports) {

	// Get the transform value of an element
	// - http://stackoverflow.com/questions/21987596/get-css-transform-property-with-jquery
	var getElementTransform = function(element) {
	  var elementTransform = getComputedStyle(element).getPropertyValue('transform');
	  return elementTransform.split(',')[4];
	}

	module.exports = getElementTransform;


/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	var select = __webpack_require__(7);
	var klass = __webpack_require__(10);

	var slider2 = __webpack_require__(5);
	var popup = __webpack_require__(13);

	slider2('.advertisers__slider .slider2', 2, advertisersSlideClick);

	function advertisersSlideClick(slide) {
	  var p = select('.popup')[0];
	  klass(p, 'popup--active', 'add');
	  popup(p, '.icon-hamburger');
	}


/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	var click = __webpack_require__(9);
	var klass = __webpack_require__(10);

	// Close a popup window
	//
	// $popupWindow = the popup element
	// $closeID = the ID of the closing element

	var popup = function(popupWindow, closeID) {
	  var popupClose = popupWindow.querySelectorAll(closeID);

	  click(popupClose, function() {
	    klass(popupWindow, 'popup--active', 'remove')
	  });
	}


	module.exports = popup;


/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	__webpack_require__(15);


/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	var filter = __webpack_require__(16);
	filter('category', '.features__filters .li', '.features__articles .article');


/***/ },
/* 16 */
/***/ function(module, exports) {

	var visibleItems = [];

	// Click on a filter with a certain type
	// - type: the css class prefix, like 'year'
	// - filtersID : all filters of the same type, like 'year-filters' etc
	// - itemsID: the items to be filtered, like 'thumbs'
	var filter = function(type, filtersID, itemsID) {
	  var filters = document.querySelectorAll(filtersID);
	  var items = document.querySelectorAll(itemsID);

	  for (var i = 0; i < filters.length; i++) {
	    filters[i].addEventListener('click', clickFilter, false);
	  }


	  // Click on a filter
	  function clickFilter(event) {
	    // get current filter information
	    attr = this.dataset.filter;

	    // mark all filters inactive
	    markAllInactive(filters, 'filter--active');
	    visibleItems = removeAllElements(visibleItems, type);

	    // mark this filter active
	    this.classList.add('filter--active');
	    visibleItems.push(attr);

	    // do the filtering
	    doFilter();
	  }


	  // Show / hide items
	  function doFilter() {
	    for (var i = 0; i < items.length; i++) {
	      // show all
	      items[i].classList.remove('article--inactive');

	      // combine filters
	      // - only those items will be displayed who satisfy all filter criterias
	      var visible = true;

	      for (var j = 0; j < visibleItems.length; j++) {
	        visible = visible && items[i].classList.contains(visibleItems[j]);
	      }

	      if (!visible) {
	        items[i].classList.add('article--inactive');
	      }
	    }
	  }


	  // Remove certain elements from an array
	  function removeAllElements(array, type) {
	    return array.filter(function(item) {
	      return (item.indexOf(type) === -1);
	    });
	  }

	  // Remove the active class from a series of DOM elements
	  function markAllInactive(items, klass) {
	    for (var i = 0; i < items.length; i++) {
	      items[i].classList.remove(klass);
	    }
	  }


	}

	module.exports = filter;


/***/ }
/******/ ]);